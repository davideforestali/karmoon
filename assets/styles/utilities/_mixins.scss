// General mixins

// LAYOUT

// Breakpoints
@mixin breakpoint($point) {
    $found: false;
    @each $key,
    $size in $breakpoints {
        @if $point==$key {
            $found: true;
            @media (min-width: $size) {
                @content;
            }
        }
    }
    @if $found==false {
        @error "Mixin included with wrong argument name";
    }
}

@mixin breakpoint-max($point) {
    $found: false;
    @each $key,
    $size in $breakpoints {
        @if $point==$key {
            $found: true;
            @media (max-width: $size - 0.02) {
                @content;
            }
        }
    }
    @if $found==false {
        @error "Mixin included with wrong argument name";
    }
}

@mixin breakpoint-between($lower, $upper) {
    $found: false;
    $lowerFound: false;
    $upperFound: false;
    $min: map-get($breakpoints, $lower);
    $max: map-get($breakpoints, $upper);
    @each $key,
    $size in $breakpoints {
        @if $lower==$key {
            $lowerFound: true;
        }
        @if $upper==$key {
            $upperFound: true;
        }
    }
    @if $upperFound==true and $lowerFound==true {
        $found: true;
        @media (min-width: $min) and (max-width: $max - 0.02) {
            @content;
        }
    }
    @if $found==false {
        @error "Mixin included with wrong arguments names";
    }
    @else {
        @if $min>$max {
            @error "Mixin included with inverted arguments";
        }
    }
}

// Containers
@mixin make-container-max-width {
    @each $key,
    $size in $container-max-widths {
        @include breakpoint($key) {
            max-width: $size;
        }
    }
}

// GRID

@mixin make-columns {
  @each $key in map-keys($breakpoints) {
    // Allow columns to stretch full width below their breakpoints
    @for $i from 1 through $grid-columns {
      .grid__col-#{$key}-#{$i} {
        position: relative;
        width: 100%;
        padding: 0 $spacer;
      }
    }
    .grid__col-#{$key},
    .grid__col-#{$key}-auto {
      position: relative;
      width: 100%;
      padding: 0 $spacer;
    }
    @include breakpoint($key) {
      .grid__col-#{$key} {
        flex-basis: 0;
        flex-grow: 1;
        max-width: 100%; // Reset earlier grid tiers
      }
      .grid__col-#{$key}-auto {
        flex: 0 0 auto;
        width: auto;
        max-width: 100%; 
      }
      @for $i from 1 through $grid-columns {
        .grid__col-#{$key}-#{$i} {
          flex: 0 0 percentage($i / $grid-columns);
          max-width: percentage($i / $grid-columns);
        }
      }

      // offsets
      @for $i from 1 through $grid-columns {
        .grid__offset-#{$key}-#{$i} {
          margin-left: percentage($i / $grid-columns);
        }
      }
    }
  }
}

// BUTTONS
// below there are also some hover effect mixins to choose from

@mixin btn-base(
  $bg: $black, 
  $color: $white, 
  $border-color: $bg
  ) {
  position: relative;
	display: inline-block;
	text-align: center;
  vertical-align: middle;
  background-color: $bg;
	color: $color;
	border: 3px solid $border-color;
  padding: $spacer $spacer-5;
  font-weight: $font-weight-bold;
  text-transform: uppercase;
  font-family: $font-secondary;
	cursor: pointer;
	&:hover,
	&:active,
	&:focus {
    text-decoration: none;
	}
	&:disabled,
	&[aria-disabled=true] {
		opacity: 0.5;
		cursor: default;
  }
}

// filling background from left to right hover effect
@mixin btn-hover-effect-slide-fill($bg, $color:$white) {
  z-index: map-get($z-layers, 'default');
  transition: $transition-color;
  &:before {
    content: "";
    position: absolute;
    background-color: $bg;
    height: calc(100% + #{3px * 2});
    bottom: 0;
    left: -3px;
    right: calc(100% + #{3px});
    top: -3px;
    z-index: map-get($z-layers, 'under-all');
    transition: $transition-cubic-bezier;
  }
  &:hover {
    color: $color;
    transition: $transition-color;
    &:before {
      right: -3px;
    }
  }
}

// reflection hover effect
/* if the button is hollow, include it with the button color as the 
argument, e.g. @include btn-hover-effect-reflection($btn-secondary) */
@mixin btn-hover-effect-reflection($bg: $white) {
	overflow: hidden;
	&:after {
		background-color: $bg;
		content: "";
    height: 10rem;
    width: 4rem;
		left: -6rem;
		opacity: if($bg == $white, 0.2, 0.05);
		position: absolute;
		top: -130%;
		transform: rotate(35deg);
		transition: $transition-cubic-bezier;
  }
  &:not(:disabled):hover {
    &:after {
      left: calc(100% + 3rem);
      transition: $transition-cubic-bezier;
    }
  }
}

// ACCESSIBILITY

/* Only display content to screen readers.
Ref: https://a11yproject.com/posts/how-to-hide-content/
and https://hugogiraudel.com/2016/10/13/css-hide-and-seek/ */
@mixin sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

/* To use in conjunction with sr-only to only display content when it's focused.
Useful for "Skip to main content" links. see https://www.w3.org/TR/2013/NOTE-WCAG20-TECHS-20130905/G1 */
@mixin sr-only-focusable {
  &:active,
  &:focus {
    position: static;
    width: auto;
    height: auto;
    overflow: visible;
    clip: auto;
    white-space: normal;
  }
}

// CLEARFIX

@mixin clearfix {
  &:after {
      content: "";
      display: block;
      clear: both;
  }
}

// RETINA IMAGES

@mixin img-retina($file-1x, $file-2x, $width-1x, $height-1x) {
  background-image: url($file-1x);
  @media (min-resolution: 192dpi), // IE9-11 don't support dppx
         (min-resolution: 2dppx) { // Standardized
    background-image: url($file-2x);
    background-size: $width-1x $height-1x;
  }
}

// PLACEHOLDERS

@mixin input-placeholder {
  &.placeholder { @content; }
  &:-moz-placeholder { @content; }
  &::-moz-placeholder { @content; }
  &:-ms-input-placeholder { @content; }
  &::-webkit-input-placeholder { @content; }
}

// GENERAL 

@mixin off-canvas-body {
  position: fixed;
  max-height: 0;
  overflow: hidden;
  transition: $transition-height;
  text-align: center;
  width: 100%;
  left: 0;
  padding: 0 $spacer-5;
  top: $header-height;
  height: calc(100vh - #{$header-height});
  z-index: map-get($z-layers, 'top');
  &--open {
    max-height: 100vh;
    transition: $transition-height;
    overflow-y: scroll;
    &::-webkit-scrollbar {
      width: 0px;
      background: transparent; 
    }
  }
}

@mixin main-nav-base {
  text-decoration: none;
  font-weight: $font-weight-medium;
  color: $white;
  position: relative;
  font-size: $font-size-h4;
} 

@mixin sliding-underline($color) {
  &:after {
    content: '';
    border-bottom: 2px solid $color;
    position: absolute;
    left: 0;
    bottom: 0;
    width: 0;
    transition: $transition-base;
  }
  &:hover:after {
    width: 100%;
  }
}